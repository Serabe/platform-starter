// Code generated by go-bindata.
// sources:
// config/.csscomb.json
// config/.editorconfig
// hooks/pre-commit
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configCsscombJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x4d\x76\xdb\x30\x0c\x84\xf7\x3e\x05\x1f\xd7\xc5\x05\x7c\x96\x6e\x40\x6a\xe4\xf0\x05\x02\x54\x10\x8e\x9b\xf4\xf5\xee\x7d\x72\xaa\xb6\x52\x65\x6f\x39\x1f\x66\x88\x9f\x1f\xa7\x94\x52\xca\x8e\xc9\xde\x40\x98\xe6\x78\x27\xbf\x0a\x3a\xa2\xe7\x73\x0a\xbf\xe2\xcb\x27\xc2\x72\xe3\xf7\x4e\x1d\x53\xab\x26\xa6\x5b\x75\x79\x72\xaa\xdc\x91\xcf\x29\x8b\xdd\xe0\xf9\xb7\x54\xc4\xea\x2b\x35\x1d\xa0\xb1\x88\xf7\xc7\x4d\x59\x7f\x31\x8f\x17\xd6\x21\x9f\xd3\xc8\xd2\x57\x53\x08\x26\x68\x1c\xdb\xc2\x46\x52\xdc\xa4\x29\xb6\x5f\x11\xf0\xd0\xf4\x42\x1f\x70\xdb\x19\x7e\xbb\x5a\x60\xe9\x2b\xf7\xa6\x17\xc1\xea\xd5\xcd\x83\xcc\x07\x38\x8d\x2c\x52\xb8\xbe\x2e\x10\x97\xfa\x87\x98\xb9\x82\x0a\x46\x73\xd0\xda\x7f\xde\xaa\x3c\x06\xfc\xaf\x98\x1e\xd4\x4e\xa5\x29\x87\xf9\x01\xb3\x3a\x3c\x41\x0a\xe2\x06\x28\x0d\xa8\xc2\xce\xd1\x4c\xef\x0d\x7d\xd5\xc3\x38\x9b\xa1\xcb\x30\x8a\x73\xc5\xc3\xc4\xff\xa8\xbd\xdb\x27\xd6\x21\xa8\x61\x4e\x03\xa4\x4d\x2d\xe0\x4f\x92\x8f\xe1\xe3\x99\x88\xf5\x47\xf1\xe1\x6d\xa6\x3b\xbd\xbb\xc7\xe0\x42\xbd\x7d\xec\x96\x7f\xd5\x16\x82\xde\xd7\xed\xff\x23\xbd\x41\x07\x73\x9a\x1d\x63\xfb\x4e\x2c\xed\xa2\xeb\x79\x9c\x7e\x9e\x7e\x05\x00\x00\xff\xff\x3a\x6d\xab\x3d\x09\x03\x00\x00")

func configCsscombJsonBytes() ([]byte, error) {
	return bindataRead(
		_configCsscombJson,
		"config/.csscomb.json",
	)
}

func configCsscombJson() (*asset, error) {
	bytes, err := configCsscombJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.csscomb.json", size: 777, mode: os.FileMode(436), modTime: time.Unix(1498730933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configEditorconfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x31\x4f\x33\x31\x0c\x86\xf7\xfc\x0a\x4b\xdd\x3e\xe5\xeb\x80\x18\x58\x3a\x41\x07\x06\x7e\x41\x75\x8a\xd2\x8b\x73\xe7\x92\x73\xaa\xd8\xa5\x94\xaa\xff\x1d\x25\x1c\x20\x55\xc0\x66\xbd\x79\xf3\xf8\x91\x17\xb0\x0e\xa4\xb9\xdc\x67\x8e\x34\xc0\x88\x69\x2f\x10\xf0\x05\x53\xde\x63\xa9\x63\x24\x46\xf0\x1c\x60\xf2\xc4\xea\x89\xa1\xcf\x2c\x24\x8a\xac\x66\x01\x7d\x0e\xc4\x03\x88\x9e\x12\x0a\x6c\x51\x8f\x88\x0c\x81\x62\xc4\x82\xac\x80\x0d\x2f\x8d\xf0\xf8\xb0\x16\xb3\x98\xa3\xbe\x6d\x5c\xe6\x32\x18\x53\x72\x56\x58\x81\x96\x03\x1a\xb3\xf9\xd7\x19\xe4\xe0\x72\x74\xa9\xee\x5e\x41\x8a\xa6\x1f\x7d\x11\xac\xa5\x83\xc6\xff\x77\x46\x0b\x4d\x4e\x8b\xa7\x44\x3c\xb8\xe3\x48\x8a\xb2\xf7\x3d\x7e\x52\x88\x05\x8b\xba\x48\xec\x93\x63\x3c\xce\xa4\xf9\x2d\x20\xab\x6b\xca\xb0\x82\xf6\xef\x2b\xa4\xb7\x9a\xdd\x56\x8d\xe5\xb8\x95\xee\x37\x52\xf4\x49\x9a\xec\xf2\xbc\x13\xab\x62\x77\xf2\x6a\x4f\x53\xb2\x3b\xc9\x7c\xe9\xae\x78\x37\x1f\xcd\x7a\x16\x3b\x85\x4b\xf7\x97\xff\x37\x79\xc8\xdd\xb5\xac\xfa\xad\x31\x9b\xf3\x93\x7f\xc6\x48\x09\x2d\x4c\xf3\x74\xf9\xb1\xfa\x1e\x00\x00\xff\xff\xda\x97\x97\x56\xdf\x01\x00\x00")

func configEditorconfigBytes() ([]byte, error) {
	return bindataRead(
		_configEditorconfig,
		"config/.editorconfig",
	)
}

func configEditorconfig() (*asset, error) {
	bytes, err := configEditorconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.editorconfig", size: 479, mode: os.FileMode(436), modTime: time.Unix(1498730953, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hooksPreCommit = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x5f\x4f\xdb\x30\x14\xc5\xdf\xfd\x29\xce\x42\xa4\x02\x22\xc9\xb6\x47\xfe\x6c\x62\x6d\xba\x55\x02\x32\x51\xa4\x3d\x30\x84\x9c\xc4\x49\xcc\x1c\x3b\xb2\x1d\xa0\xd3\xb4\xcf\x3e\x25\x4d\x52\x4a\x3b\xc1\x96\xb7\xf8\xde\x7b\xee\xf5\xb9\x3f\xef\xbc\x09\x62\x2e\x03\x53\x10\x72\x1e\x4d\x66\xd3\x59\x38\xb9\x9d\xce\xce\xc2\xf9\x89\xbb\x9b\x73\x8b\x94\x67\x19\x3c\x4f\xd2\x92\x79\x4a\x8a\x05\xbe\x84\xa7\x93\xdf\xf8\x85\x5c\xb3\x0a\xde\x3d\x46\xbe\xb9\xcf\x47\x6b\x07\x95\x7c\x76\x70\x57\x3d\x3b\x30\x92\x56\xa3\x3d\x42\x76\x30\x2e\x58\xf2\x03\x89\x31\x89\x2a\x63\x42\xc6\xf3\xf9\x38\x3a\xff\x74\xe2\xee\x3e\x14\x3c\x29\xfa\x00\xde\x7f\x40\x90\xb2\xfb\x40\xd6\x42\xec\x11\x9e\xe1\xfa\x1a\xde\x4f\x38\x6e\x57\xe0\xe0\xe6\xe6\x08\xb6\x60\x92\xa0\xfb\x12\x6a\x71\x7c\xfc\x3d\x8c\xa6\x24\xd4\x5a\xe9\xc3\x41\x8c\x1b\x48\x65\xc1\xa5\xb1\x54\x08\x96\xfa\x84\x7c\xe3\xb6\xc0\x82\x6a\x79\x48\x06\x81\xe6\x17\xb9\x50\x31\x15\xa0\x69\xba\x1a\xb2\x4d\xbe\xf8\x7a\x7e\x38\xa4\xca\xaa\xec\xe5\xe0\xe5\xab\xcc\xd3\x58\x69\xcb\x65\x8e\x44\x95\x25\xb7\x3e\x69\xa6\xe9\x8b\xd8\x23\xb7\x78\x47\x32\xde\xf8\x60\x0b\xa6\x19\x4a\x9e\x17\x16\x31\x43\x59\x0b\xcb\x2b\xc1\x60\xea\x38\xe5\x9a\x25\x56\x69\xce\x0c\x1e\x9a\xd6\x43\xb0\xbf\x50\xa2\x64\xc6\xf3\x5a\x53\xcb\x95\x34\x24\x53\xba\x0f\xdd\x2e\x43\xe0\x12\xee\x6e\xc6\x65\x0a\x1f\xed\x32\x31\xf2\xbb\x14\xff\xce\x28\x39\xda\x3b\x42\xaa\x56\xde\x75\xc2\x9e\xd7\xd5\x3b\xee\xba\xa0\x03\xcf\x13\x5c\x5a\x38\xee\x3a\x36\xce\xa0\xb1\x5c\x92\xfb\x11\x9e\x64\x78\xbb\xb9\x9f\xc1\x86\xa4\x50\x70\xda\x15\x21\x53\xba\xa4\xb6\x75\xac\x36\xad\x6f\xcb\xae\x07\xa0\xcf\x9c\x74\x36\x75\x96\x76\xf6\xbf\x19\x27\xa9\x92\x6c\xc5\x18\x4b\xb9\x55\x7a\x39\x3e\x21\xe1\x64\x76\x15\x5d\x8e\xa3\x8b\xe9\xec\xf3\xed\x55\x14\x9d\xcd\x07\xe6\x9e\x26\x7a\x56\x29\x61\xfe\x8e\xdf\xa6\xcc\xab\x48\xdc\xd2\xe2\x3f\xa1\xdc\x54\x7a\x05\x9f\xdb\x8a\x5e\x8b\x6a\x03\x57\xc6\x05\x6b\x90\xda\x58\xfe\x1a\x44\x5b\x2e\x99\xb4\x9b\x70\xdc\x46\xc0\x21\xff\x8c\xca\x13\x23\xaf\xda\xf7\x42\xdb\x37\x63\x3a\x6c\x58\xda\x4e\x66\x0e\x50\x09\x46\x0d\x43\xc6\x1f\x1b\xa1\xd2\xc7\x25\x2b\x59\x19\x33\x8d\x85\xaa\x91\x50\xd9\xcc\x69\x0b\x6e\x10\x2f\x70\x57\x1b\xdb\xe1\x66\x0b\x86\x4c\x09\xa1\x1e\x7a\x27\xa8\x4c\x9f\xb8\xbf\xe5\x4a\x4d\x8f\x8a\xda\x22\xb0\x2a\x28\x17\x41\x3b\x40\xb0\xbf\x1f\xec\xbf\x60\xe9\x0b\xd8\xfe\x09\x00\x00\xff\xff\x0d\x6a\x3c\xa7\x98\x05\x00\x00")

func hooksPreCommitBytes() ([]byte, error) {
	return bindataRead(
		_hooksPreCommit,
		"hooks/pre-commit",
	)
}

func hooksPreCommit() (*asset, error) {
	bytes, err := hooksPreCommitBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hooks/pre-commit", size: 1432, mode: os.FileMode(509), modTime: time.Unix(1498730905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/.csscomb.json": configCsscombJson,
	"config/.editorconfig": configEditorconfig,
	"hooks/pre-commit": hooksPreCommit,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		".csscomb.json": &bintree{configCsscombJson, map[string]*bintree{}},
		".editorconfig": &bintree{configEditorconfig, map[string]*bintree{}},
	}},
	"hooks": &bintree{nil, map[string]*bintree{
		"pre-commit": &bintree{hooksPreCommit, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

