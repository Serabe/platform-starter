// Code generated by go-bindata.
// sources:
// config/.csscomb.json
// config/.editorconfig
// config/.eslintrc.js
// hooks/pre-commit
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configCsscombJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x4d\x76\xdb\x30\x0c\x84\xf7\x3e\x05\x1f\xd7\xc5\x05\x7c\x96\x6e\x40\x6a\xe4\xf0\x05\x02\x54\x10\x8e\x9b\xf4\xf5\xee\x7d\x72\xaa\xb6\x52\x65\x6f\x39\x1f\x66\x88\x9f\x1f\xa7\x94\x52\xca\x8e\xc9\xde\x40\x98\xe6\x78\x27\xbf\x0a\x3a\xa2\xe7\x73\x0a\xbf\xe2\xcb\x27\xc2\x72\xe3\xf7\x4e\x1d\x53\xab\x26\xa6\x5b\x75\x79\x72\xaa\xdc\x91\xcf\x29\x8b\xdd\xe0\xf9\xb7\x54\xc4\xea\x2b\x35\x1d\xa0\xb1\x88\xf7\xc7\x4d\x59\x7f\x31\x8f\x17\xd6\x21\x9f\xd3\xc8\xd2\x57\x53\x08\x26\x68\x1c\xdb\xc2\x46\x52\xdc\xa4\x29\xb6\x5f\x11\xf0\xd0\xf4\x42\x1f\x70\xdb\x19\x7e\xbb\x5a\x60\xe9\x2b\xf7\xa6\x17\xc1\xea\xd5\xcd\x83\xcc\x07\x38\x8d\x2c\x52\xb8\xbe\x2e\x10\x97\xfa\x87\x98\xb9\x82\x0a\x46\x73\xd0\xda\x7f\xde\xaa\x3c\x06\xfc\xaf\x98\x1e\xd4\x4e\xa5\x29\x87\xf9\x01\xb3\x3a\x3c\x41\x0a\xe2\x06\x28\x0d\xa8\xc2\xce\xd1\x4c\xef\x0d\x7d\xd5\xc3\x38\x9b\xa1\xcb\x30\x8a\x73\xc5\xc3\xc4\xff\xa8\xbd\xdb\x27\xd6\x21\xa8\x61\x4e\x03\xa4\x4d\x2d\xe0\x4f\x92\x8f\xe1\xe3\x99\x88\xf5\x47\xf1\xe1\x6d\xa6\x3b\xbd\xbb\xc7\xe0\x42\xbd\x7d\xec\x96\x7f\xd5\x16\x82\xde\xd7\xed\xff\x23\xbd\x41\x07\x73\x9a\x1d\x63\xfb\x4e\x2c\xed\xa2\xeb\x79\x9c\x7e\x9e\x7e\x05\x00\x00\xff\xff\x3a\x6d\xab\x3d\x09\x03\x00\x00")

func configCsscombJsonBytes() ([]byte, error) {
	return bindataRead(
		_configCsscombJson,
		"config/.csscomb.json",
	)
}

func configCsscombJson() (*asset, error) {
	bytes, err := configCsscombJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.csscomb.json", size: 777, mode: os.FileMode(436), modTime: time.Unix(1498730933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configEditorconfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x31\x4f\x33\x31\x0c\x86\xf7\xfc\x0a\x4b\xdd\x3e\xe5\xeb\x80\x18\x58\x3a\x41\x07\x06\x7e\x41\x75\x8a\xd2\x8b\x73\xe7\x92\x73\xaa\xd8\xa5\x94\xaa\xff\x1d\x25\x1c\x20\x55\xc0\x66\xbd\x79\xf3\xf8\x91\x17\xb0\x0e\xa4\xb9\xdc\x67\x8e\x34\xc0\x88\x69\x2f\x10\xf0\x05\x53\xde\x63\xa9\x63\x24\x46\xf0\x1c\x60\xf2\xc4\xea\x89\xa1\xcf\x2c\x24\x8a\xac\x66\x01\x7d\x0e\xc4\x03\x88\x9e\x12\x0a\x6c\x51\x8f\x88\x0c\x81\x62\xc4\x82\xac\x80\x0d\x2f\x8d\xf0\xf8\xb0\x16\xb3\x98\xa3\xbe\x6d\x5c\xe6\x32\x18\x53\x72\x56\x58\x81\x96\x03\x1a\xb3\xf9\xd7\x19\xe4\xe0\x72\x74\xa9\xee\x5e\x41\x8a\xa6\x1f\x7d\x11\xac\xa5\x83\xc6\xff\x77\x46\x0b\x4d\x4e\x8b\xa7\x44\x3c\xb8\xe3\x48\x8a\xb2\xf7\x3d\x7e\x52\x88\x05\x8b\xba\x48\xec\x93\x63\x3c\xce\xa4\xf9\x2d\x20\xab\x6b\xca\xb0\x82\xf6\xef\x2b\xa4\xb7\x9a\xdd\x56\x8d\xe5\xb8\x95\xee\x37\x52\xf4\x49\x9a\xec\xf2\xbc\x13\xab\x62\x77\xf2\x6a\x4f\x53\xb2\x3b\xc9\x7c\xe9\xae\x78\x37\x1f\xcd\x7a\x16\x3b\x85\x4b\xf7\x97\xff\x37\x79\xc8\xdd\xb5\xac\xfa\xad\x31\x9b\xf3\x93\x7f\xc6\x48\x09\x2d\x4c\xf3\x74\xf9\xb1\xfa\x1e\x00\x00\xff\xff\xda\x97\x97\x56\xdf\x01\x00\x00")

func configEditorconfigBytes() ([]byte, error) {
	return bindataRead(
		_configEditorconfig,
		"config/.editorconfig",
	)
}

func configEditorconfig() (*asset, error) {
	bytes, err := configEditorconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.editorconfig", size: 479, mode: os.FileMode(436), modTime: time.Unix(1498730953, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configEslintrcJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xc1\x6a\xf3\x30\x10\x84\xef\x7e\x8a\x41\xe7\xf8\xf7\x7f\x76\xe9\xa1\x97\x9e\xfa\x06\x25\x14\xd9\x9a\x24\x02\x45\x2b\x76\xa5\x36\x10\xfc\xee\xc5\x26\xa4\x2d\x39\xec\x69\xe6\xfb\xd8\xdd\xb3\x84\x96\xf8\x8f\x97\x22\x5a\x0d\xcf\xb8\x76\x00\x2f\x95\x39\xd8\x08\xe7\xa3\x4e\x79\xea\x27\x6f\x74\xbb\x0e\x28\xa9\x1d\x63\xb6\x11\xef\x2e\x9e\x57\xc4\xed\xe0\x8a\xb2\xd6\x48\x75\xfb\xb5\xa2\x2d\xd1\xc6\xcd\x83\x9f\x6c\xb8\x97\x46\x38\xaa\x8a\x6e\x3e\xe0\xe6\x19\xb2\xf4\xbc\x54\xf5\x99\xd2\xac\x0f\x2c\xcc\x81\x79\x8e\x34\x37\xe2\xff\x43\xb7\x65\xa5\x49\xfa\x64\x78\x8c\xb7\xf5\x2d\x4a\xfe\x8d\x1e\x5a\x9e\xfb\xec\xcf\x7f\x7c\x9b\x28\x50\x6d\x16\x65\x1f\x7c\x3e\x26\x6e\x31\x86\x01\x13\x67\xdf\x8c\x90\x03\x3e\xac\x15\xea\x9d\x29\xa9\xd9\x3a\x6e\xfd\xc3\xed\x18\x5c\xe1\x53\x92\xaf\x57\xd1\x37\x91\xf2\x72\xa8\xd4\x7a\x92\x76\x3c\x55\x1b\x51\xb5\x11\xcb\xbe\x03\x96\x6e\x79\xea\xbe\x03\x00\x00\xff\xff\x8c\xcd\x00\x2e\x76\x01\x00\x00")

func configEslintrcJsBytes() ([]byte, error) {
	return bindataRead(
		_configEslintrcJs,
		"config/.eslintrc.js",
	)
}

func configEslintrcJs() (*asset, error) {
	bytes, err := configEslintrcJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.eslintrc.js", size: 374, mode: os.FileMode(436), modTime: time.Unix(1498733572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hooksPreCommit = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x94\x6d\x4f\xc3\x36\x10\xc7\xdf\xfb\x53\xdc\x42\xa4\xb6\x08\x27\xdb\x5e\xf2\xb0\x89\xf5\x61\xab\x04\x74\xa2\x95\xf6\x82\x21\xe4\x24\x4e\x72\x9d\x63\x47\xb6\x53\xe8\xb4\x0f\x3f\xc5\x49\x5b\x5a\x5a\x0a\x48\xbc\x4a\xe4\xbb\xfb\xfb\x1e\x7e\xbe\x93\x1f\xc2\x08\x65\x68\x72\x42\x6e\x27\x83\xf1\x68\x3c\x1c\x3c\x8d\xc6\x37\xc3\xe9\x95\xdf\xcd\xd0\x42\x82\x69\x0a\x94\x4a\x56\x70\xaa\xa4\x58\x42\x73\xac\xf9\x82\x96\x4c\x1b\x0e\x7f\x0c\xaf\x07\x3d\xf8\x0f\x32\xcd\x4b\xa0\x0b\xe8\x04\x66\x91\x75\xb6\x0e\x4a\xb9\x73\x30\x2f\x77\x0e\x8c\x64\x65\xa7\x47\xc8\x09\xf4\x73\x1e\xff\x03\xb1\x31\xb1\x2a\x22\x42\xfa\xd3\x69\x7f\x72\xfb\xdb\x95\xdf\x7d\xce\x31\xce\x57\x06\xf8\xf9\x17\x08\x13\xbe\x08\x65\x25\x44\x8f\x60\x0a\x0f\x0f\x40\xff\x05\xcf\x6f\x03\x3c\x78\x7c\xbc\x00\x9b\x73\x49\x00\x00\x62\x66\xe1\xf2\xf2\xef\xe1\x64\x44\x86\x5a\x2b\x7d\xbe\x16\x42\x03\x52\x59\x40\x69\x2c\x13\x82\x27\x01\x21\x7f\xa1\xcd\x61\xc9\xb4\x3c\x27\x2e\xb8\xfe\x85\x4c\xa8\x88\x09\x60\x49\xb2\x49\xce\x39\xde\xfd\x79\xdb\xfa\xc9\xb2\x58\xe9\x00\xcd\x36\x6e\xd7\x91\xd2\x16\x65\x06\xb1\x2a\x0a\xb4\x01\xa9\xd3\xa8\x03\xf8\x0b\x5a\xf8\x89\xa4\x58\x17\x6e\x73\xae\x39\x14\x98\xe5\x16\x22\x0e\x45\x25\x2c\x96\x82\x83\xa9\xa2\x04\x35\x8f\xad\xd2\xc8\x0d\x3c\xd7\x77\xae\x8d\xab\x2a\x62\x25\x53\xcc\x2a\xcd\x2c\x2a\x69\x48\xaa\xf4\xca\xf4\xd4\x98\x00\x25\xf8\xdd\x14\x65\x02\x01\xb8\x69\x42\x27\x68\x5d\x82\xb9\x51\xb2\xd3\xbb\x80\x44\x35\xcd\x6a\x45\x29\x6d\x63\x3d\x7f\x5b\xcc\x03\x4a\x05\x4a\x0b\xfe\x36\x32\x2e\xba\x99\x85\xff\x2b\x50\xc9\xe1\xc7\xed\x31\xb8\xa2\xe3\x5c\x81\xe7\xa6\x00\xa9\xd2\x05\xb3\xae\x37\x95\x71\x1d\x6a\xee\x39\x03\xb6\xd3\x33\x6f\x13\xdf\x34\xad\xfe\x4d\x91\x24\x4a\xf2\x0d\x36\x3c\x41\xab\x74\x93\x24\x21\xc3\xc1\x78\x36\xb9\xef\x4f\xee\x46\xe3\xdf\x9f\x66\x93\xc9\xcd\x74\x8d\xd1\x6b\x47\x6a\x95\x12\xe6\x30\x51\x6f\x65\x8e\xc2\xb5\x47\xfe\x0b\x9c\xbd\x55\x39\x86\xdc\xbe\x88\x8f\xd0\x57\xf3\x92\xa2\xe0\x8e\x92\xed\x99\xae\xa9\xd8\x53\x53\xec\x9a\xee\xf9\x75\xa8\x47\x3e\x34\xfd\x57\xbd\x9a\x39\xe0\x99\x83\xde\xb4\x24\xf0\xc4\xe5\x61\xce\xa0\x14\x9c\x19\x0e\x29\xbe\xd4\x02\x45\x00\xf7\xbc\xe0\x45\xc4\x35\x2c\x55\x05\x31\x93\x75\x5e\x36\x47\x03\xd1\x12\xe6\x95\xb1\x2d\x41\x36\xe7\x90\x2a\x21\xd4\xf3\xaa\x66\x26\x93\xb6\x5b\x07\xca\xa8\xef\x28\x99\xcd\x43\xab\xc2\x62\x19\xba\x04\xc2\xd3\xd3\xf0\xf4\x9d\xe6\x1d\x22\x71\x38\xbd\x19\xdf\xcd\x36\x9c\x19\xf7\x4e\x0e\xb3\xe5\xdc\x8f\xf3\xd4\xc8\x7c\x85\xa1\x26\xb2\xf9\xb4\xef\x99\x32\xd4\x91\x8c\x68\x54\x37\xb8\xb5\x94\xa2\xca\x50\x52\x2c\x4a\xa5\xed\xce\x61\xa9\xb9\xb5\xc8\x35\xac\x7e\x8e\x62\xf8\x3d\x97\x7e\xe3\x1e\x6d\x33\xde\xb3\x46\x1b\xcb\x7b\x5b\xb4\xf1\xd0\x71\x30\x37\xaf\x96\x68\xab\x48\x63\xf0\xfc\x2d\x0d\x0f\x3c\xbf\x9b\xa0\x76\xd1\x94\xbe\x31\xf7\x1c\x7a\xc1\xdc\x78\x9f\x5d\xa7\x06\x52\x55\xc9\x04\x58\x1c\x2b\x9d\xb8\xc7\xa0\xf6\x56\xf6\xc9\xf5\xfa\x7f\x00\x00\x00\xff\xff\x67\x84\xc6\x17\x23\x08\x00\x00")

func hooksPreCommitBytes() ([]byte, error) {
	return bindataRead(
		_hooksPreCommit,
		"hooks/pre-commit",
	)
}

func hooksPreCommit() (*asset, error) {
	bytes, err := hooksPreCommitBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hooks/pre-commit", size: 2083, mode: os.FileMode(509), modTime: time.Unix(1498737246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/.csscomb.json": configCsscombJson,
	"config/.editorconfig": configEditorconfig,
	"config/.eslintrc.js": configEslintrcJs,
	"hooks/pre-commit": hooksPreCommit,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		".csscomb.json": &bintree{configCsscombJson, map[string]*bintree{}},
		".editorconfig": &bintree{configEditorconfig, map[string]*bintree{}},
		".eslintrc.js": &bintree{configEslintrcJs, map[string]*bintree{}},
	}},
	"hooks": &bintree{nil, map[string]*bintree{
		"pre-commit": &bintree{hooksPreCommit, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

