// Code generated by go-bindata.
// sources:
// config/.csscomb.json
// config/.editorconfig
// hooks/pre-commit
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configCsscombJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x41\xae\xdb\x30\x0c\x44\xf7\x39\x85\xa0\x75\x75\x81\x9c\xa5\x1b\x4a\x1e\x27\x42\x68\xd2\xa5\xe8\x1a\x49\xd1\xbb\x17\x4e\xea\x16\xf6\x77\xb2\xe5\x3c\xce\x88\xa4\x7e\x9d\x42\x08\x21\x1a\x06\xfd\x89\x84\x61\xf4\x7b\xb2\x89\xd1\xe0\x2d\x9e\x83\xdb\x84\x6f\x2f\x84\x78\xa6\x7b\x4b\x0d\x43\x2d\xca\x2a\x5b\x75\x29\x59\x2a\xd4\x10\xcf\x21\xb2\xce\xb0\xf8\x57\xca\xac\xe5\x96\xaa\x74\x10\x5f\xc4\x67\x71\xd3\xd6\xae\x6a\x7e\x25\xe9\xe2\x39\xf4\xc4\x6d\x35\x05\x63\x80\xf8\xb1\x2d\xb4\x4f\x82\x99\xab\x60\xfb\x14\x06\x75\x55\x2e\xe9\x01\xd3\x9d\xe1\x8f\x49\x1d\xcb\x5c\xb1\x55\xb9\x30\x56\xaf\xa6\xe6\x49\xad\x83\xa5\x9e\x98\x33\x95\xdb\x02\x51\x2e\xff\x88\x91\x0a\x52\x46\xaf\x86\xb4\xce\x1f\xb7\x2a\xf5\x0e\xfb\x2f\x86\x37\xbd\x43\xae\x42\xae\x76\xc0\xac\x0e\x1f\x90\x0c\x9f\x01\x49\x1d\x0a\x93\x91\x57\x95\xe7\x40\xdf\xe5\x30\x4e\x47\xc8\xb2\x8c\x6c\x54\xf0\x36\xf1\x0b\xb5\x77\x7b\x61\x0d\x8c\xe2\x6a\xa9\x03\xd7\xa1\x3a\xec\x43\xf2\x31\x7c\xbc\x13\xd6\xf6\x2e\xde\xad\x8e\xe9\x49\xef\xfe\xa3\x53\x4e\xad\x3e\x76\xc7\x9f\xa4\x3a\xa3\xb5\xf5\xfa\x8b\x74\xfa\x7d\xfa\x13\x00\x00\xff\xff\x77\x38\x8d\xf7\xe7\x02\x00\x00")

func configCsscombJsonBytes() ([]byte, error) {
	return bindataRead(
		_configCsscombJson,
		"config/.csscomb.json",
	)
}

func configCsscombJson() (*asset, error) {
	bytes, err := configCsscombJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.csscomb.json", size: 743, mode: os.FileMode(436), modTime: time.Unix(1498571809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configEditorconfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x41\x4b\xf4\x30\x10\x86\xef\xf9\x15\x03\x7b\xfb\xe8\xb7\xa0\x78\xf0\xb2\x27\xdd\x83\xbf\x41\x4a\x48\x9b\x49\x3b\x4b\x3a\x29\x99\x59\xeb\x2a\xfb\xdf\x25\xb1\x2a\x14\xf4\x16\xde\xbc\x79\xde\x87\xec\xe0\xe8\x49\x53\x7e\x48\x1c\x68\x80\x11\xe3\x2c\xe0\xf1\x05\x63\x9a\x31\x97\x63\x20\x46\x70\xec\x61\x72\xc4\xea\x88\xa1\x4f\x2c\x24\x8a\xac\x66\x07\x7d\xf2\xc4\x03\x88\x5e\x22\x0a\x74\xa8\x0b\x22\x83\xa7\x10\x30\x23\x2b\x60\xc5\x4b\x25\x3c\x3d\x1e\xc5\xec\xd6\xa8\xaf\x8b\xfb\x94\x07\x63\x72\x4a\x0a\x07\xd0\x7c\x46\x63\x9e\xff\xb5\x06\xd9\xdb\x14\x6c\x2c\xdb\x07\x88\xc1\xf4\xa3\xcb\x82\xa5\x74\xd6\xf0\xff\xde\x68\xa6\xc9\x6a\x76\x14\x89\x07\xbb\x8c\xa4\x28\xb3\xeb\xf1\x8b\x42\x2c\x98\xd5\x06\x62\x17\x2d\xe3\xb2\x92\xd6\x3b\x8f\xac\xb6\x2a\xc3\x01\xea\xbb\xef\x90\xde\x4a\x76\x57\x34\xf6\x63\x27\xed\x6f\xa4\xe0\xa2\x54\xd9\xfd\xfb\x49\x1a\x95\xe6\x24\xaf\xcd\x65\x8a\xd7\x76\x83\xba\xfd\x2c\x95\x1f\x69\x26\x7f\x6d\xff\x52\xff\x81\x0e\xa9\xdd\x7a\xaa\xeb\x36\xe8\x1b\xf3\x11\x00\x00\xff\xff\x90\x04\x4b\x5d\xbf\x01\x00\x00")

func configEditorconfigBytes() ([]byte, error) {
	return bindataRead(
		_configEditorconfig,
		"config/.editorconfig",
	)
}

func configEditorconfig() (*asset, error) {
	bytes, err := configEditorconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.editorconfig", size: 447, mode: os.FileMode(436), modTime: time.Unix(1498637073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hooksPreCommit = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\xef\x6f\xdb\x38\x16\xfc\x1c\xfe\x15\xb3\xb2\xd1\x34\x45\x24\xa7\x41\xb6\xe8\x8f\x4d\x0f\x39\x37\xb9\x33\x90\x36\x87\x4d\x80\xfd\xd0\x0d\x02\x4a\x7c\xb2\xd8\x48\xa4\x96\xa4\xe2\x78\xb1\xd8\xbf\xfd\xf0\x28\xc9\x89\x91\x1c\xb6\xb7\xfe\x64\x99\xe4\xe3\xbc\x99\x79\x23\x4f\x7e\x98\xe5\xda\xcc\x7c\x25\x26\x62\x82\x13\x03\xba\x97\x4d\x5b\x13\x2a\x6b\x6f\xe1\x0b\xa7\xdb\x80\x60\x71\x47\x4e\x97\x6b\xac\x2a\x19\xa0\x3d\x64\x6e\xbb\xf8\x7b\x4e\x28\x6c\xd3\xe8\x10\x48\x65\x62\x82\xb9\xac\x6b\x52\xc8\xd7\x48\x96\x3a\x0c\x6b\x09\x56\x3a\x54\x30\x16\xd2\x2d\xbb\x86\x4c\xf0\x19\x70\x55\x8d\xb7\x54\xb6\xab\x95\x98\x80\xee\x75\x18\xb7\x9a\xf4\x77\x72\x16\x3e\xc8\xd0\x79\xc8\x32\x90\x83\xf6\xbe\xd3\x66\x09\x69\x20\xdb\xd6\xd9\xd6\x69\x19\x08\x0d\x79\x2f\x97\x04\x5d\x8a\x09\xb8\x82\x34\xc1\x33\x38\x1f\x6c\x8b\x50\x8d\x10\xb3\xd8\xe3\x95\x05\x19\x99\xd7\x84\x50\x69\x1f\x11\xec\xc3\x91\x91\xcd\xf0\x4b\xa9\x79\xcd\x22\x69\x1d\xa5\x43\x03\x99\x10\xba\x04\x77\xe4\xe8\x2e\x6d\xa5\xf3\x84\x34\x1d\x48\xf9\xf7\xe9\xc9\x27\x7c\x9c\x29\xba\x9b\x99\xae\xae\x71\xf8\xf1\xc5\x6b\x11\x2a\x32\x62\x47\x2e\xa5\x36\x3e\x1c\xf3\x16\x41\xb5\x27\xb1\x33\xc1\xc2\xe8\xa0\x65\x3d\xa0\x7a\x0f\xa5\xcb\x12\xc3\x4e\xee\x8d\x9a\x36\xac\x11\x1c\x11\x6c\xfe\x8d\x8a\xf0\x50\xe7\x28\x7f\x7b\xf8\xa3\x2a\xde\x1c\x1d\x16\xf9\x1b\xca\xdf\xc9\x83\x37\x07\xf4\xe3\x51\x5e\xbe\x55\x6f\xde\x1d\xbe\x7d\x5b\xe6\x44\x47\xef\x0e\x8e\x44\xa9\x85\x98\x60\x51\x62\x6d\xbb\x48\x08\x77\x24\xeb\xda\xae\x22\xb7\x27\x97\xf3\xc5\x22\x76\xca\x7d\x7b\x78\x0a\x7d\xf3\x77\xd2\xe9\x9e\x1c\x8b\xe0\x3a\xca\x44\x3c\x64\xac\x91\xbe\xd0\xfa\x78\xfa\xb2\x97\xd5\x94\x7a\x89\x34\xcd\xad\xad\x23\x85\x3e\xdb\xda\xb7\xc7\xb7\xcf\x9d\xf5\x1e\x6d\x2d\x43\x69\x5d\x83\xd6\x59\x6e\xc6\x23\x90\x51\x11\xce\x9d\xd5\xea\x39\x38\x1f\xd0\x3a\xba\x23\x13\xc4\x84\xe5\x6b\x50\x3a\xdb\x20\xa7\xa8\xbd\x52\x14\x4f\xb3\xae\x8e\x5a\xeb\x75\xb0\x6e\x9d\xe1\x17\x02\xdd\xb7\xb5\xd5\x21\x2e\x95\xb2\xe0\x2f\x32\x3e\x89\x09\x5a\xa7\x4d\x88\x9d\x39\x69\x96\xc4\xc6\x72\xc1\xa3\x5f\x87\x6f\x65\x41\x28\x2a\xe9\x64\xc1\x4e\x93\x46\x81\x8c\xf2\xbd\x1b\x83\xae\x15\x65\xec\x80\xaf\x48\xa6\x5b\x8d\x26\xf8\xe1\x18\x09\x33\x95\xe0\x1a\x2f\x5e\xb0\xbe\x5f\x6c\xa0\xcd\xd5\xe8\x3c\xc1\x96\xc8\x9d\x2c\x6e\x89\x6f\x74\xb6\x33\x0a\x12\xc1\x0d\x50\xb4\x87\xbd\x45\x45\x8e\xf6\xf1\x52\x87\x5d\xcf\x45\xb8\x7f\x38\xfa\xad\xd3\x8e\xd4\x3e\x4a\xeb\xd0\x5a\x17\x64\xae\x6b\xcd\xee\xb0\xb8\xb4\xb5\x74\xda\xe3\xf5\xc1\xae\xc7\xac\xf3\x2e\x4e\x72\x70\x7b\xfb\xf0\xda\x14\xd1\x6a\xb1\xb7\xdf\x3a\xe9\x68\x04\x80\x7c\x1d\xc8\xa3\x92\x6d\x4b\x86\xcb\x94\xb2\xae\xa1\x4d\xdc\xaa\xc8\xeb\xa5\x91\x81\x54\x0f\x2d\x13\x3b\x81\x7c\x40\xaf\x7a\xf4\x69\x9a\x16\xb2\xa8\x48\x21\x4d\x59\xab\xd4\x9a\x7a\x8d\x34\xe5\xb5\xb4\xd4\x75\x20\x77\x7c\x82\xf4\x77\x4c\x47\x43\xff\x21\x76\x80\xf3\xf9\xcd\xc9\xf9\xf9\xf1\x9c\x9b\x4e\x15\x76\xbf\x22\xfd\xf3\xfa\xd7\x83\x5d\xfc\x81\x55\x81\xb4\xd8\x63\x1a\x0f\x86\xa1\x29\x64\xc0\x4f\x3f\xfd\x7a\x7a\x71\x26\x4e\x9d\xb3\xee\x3d\x4e\x42\xe0\xa1\x88\xa6\x51\xcc\xdd\xb6\x69\xc0\x48\x32\x21\xae\xd8\xc1\x85\x34\x28\x24\xb3\xde\x3a\x9b\xd7\xd4\x78\xe8\xed\x31\x58\x59\x77\xdb\x0b\xdb\x92\xe5\xac\xb3\x06\x36\x54\xe4\x36\x5e\xf5\x5c\x2c\x86\x5b\xcf\x79\x4d\x9c\x2b\x9c\x7b\xea\x4e\xfb\x71\x3e\x36\xa1\x41\x11\x45\x26\xc4\x30\x6f\xb7\xc6\xae\xfa\xa8\xe4\x27\x26\x5f\x59\xf6\x2e\x3f\x31\x3c\x35\xd6\x88\x78\x2b\x2a\x6e\xd1\x79\x6d\x96\xef\x85\x00\x1e\xcd\xd7\x33\x83\x15\x87\x52\x30\x35\x3b\x31\x2d\x5f\x3f\x4c\x3a\x77\x40\xf1\xb6\x55\xa5\x03\xf5\x96\x26\x26\xd0\xef\xf7\xf6\x8f\x50\x6d\x59\x92\x51\x0c\x67\x43\x9d\x8f\x7e\x2f\xa5\xae\x33\x41\xf7\x54\x60\x54\x3b\xd5\x46\xd1\x3d\x6b\x1e\x41\x6e\xb4\xdf\x88\x9b\xa6\x42\x7c\xbe\xf8\xb4\x38\x5b\x9c\x7e\xba\x39\x5b\x9c\x9f\x5e\x1e\x6f\x79\xe5\xc1\x22\x9c\x80\x7f\xf6\xb1\x10\x6b\x15\xde\x17\xb6\xc9\x85\x98\x5f\x5e\xce\x2f\x3e\xff\xf3\x78\xfa\x72\x55\xe9\xa2\x1a\x17\x70\xf8\x11\x9b\x48\xdd\x8b\xb3\xf7\x95\x7d\x95\x4c\x87\x03\x09\xae\xaf\x3f\x20\x3a\x06\xc3\xe7\xa9\x71\xc6\x62\xda\xc3\xd8\x00\xc6\x1c\x5f\x50\x99\x10\xbf\xb0\x01\xd6\xd2\x99\xc8\x7a\xff\xe1\x47\x2c\x6b\x9b\xcb\x3a\x1a\x6d\x03\x32\x6e\xfe\xf2\x9f\xcf\xef\x37\x5b\x4d\xdb\x8c\xe5\x90\x2e\x1f\x76\x9e\xe4\xd6\x05\x66\x77\x7c\xe7\x30\x9a\xf1\xd0\x96\x64\xbd\x5e\x8d\x5e\x56\x81\x9d\xd6\x74\x75\xd0\xec\x46\xdf\xe5\x4a\x3b\x2a\x82\x75\x9a\x86\x04\xda\x2c\x8e\x0d\xf5\x0e\xe9\x9c\x0c\xda\x1a\x2f\x38\x1e\x86\xa5\x9b\xc1\x3c\xda\x60\xfa\xb2\xd4\x46\x21\x43\xd4\x01\xbb\xd9\xb0\x25\xfb\xe6\xad\xd9\xdd\xfb\x00\x65\x1f\xb8\x1b\x0a\xa7\xe9\x70\x3e\x99\x6e\x17\x4c\x90\xa6\x35\x9b\x28\x99\x6e\x2b\x9e\x6c\x6a\xf4\x22\x4d\xff\x81\xd4\x10\x0e\x9e\xea\xb3\xa1\xa1\xa8\x2c\x92\x28\x11\x07\x5b\x23\x43\x64\x2c\xce\xc0\x08\x64\x9f\xff\x63\x6c\x31\x99\x3c\xad\xd3\xd3\x39\x3e\x96\x5a\x28\x6b\xe8\xc1\x63\xa4\xf8\xdd\xd0\xc3\x17\xe2\xf4\xd3\xe2\xea\xe2\xe7\xf9\xc5\x97\xb3\xc5\xbf\x6e\xae\x2e\x2e\xce\x2f\x37\x9e\x7b\xbc\x31\x0d\xd6\xd6\xfe\x7f\xdb\xef\x69\x99\xef\x72\xe2\x33\x57\xfc\x4d\x53\x3e\xad\xf4\x1d\xfe\x7c\xee\xd0\xf7\x5a\x95\xcd\x15\xb3\x42\x9b\xa7\xe2\x6f\x99\xe8\x99\x26\xfb\xe4\x48\xa6\x5c\x20\x11\xff\xb7\x55\x1e\x11\x79\xb5\xc9\xb7\x46\xfb\xc1\x36\xa4\x22\x32\x0e\xb8\x9a\xa4\xe7\x20\xbe\x8f\x7f\x19\x32\xfc\x4c\x0d\x35\x39\xb9\x87\xd4\xb5\x22\x06\x6e\xbe\xc6\xb7\xce\x87\xc1\x6e\x31\xbd\x2d\x47\xec\xc8\x84\x34\xea\x11\xfb\xcf\xb4\xc4\x77\xb4\x32\x54\xb3\x60\x67\xcd\x7a\x16\x01\xcc\x5e\xbd\x9a\xbd\xfa\x0b\x4a\xff\xc2\xb6\xff\x0d\x00\x00\xff\xff\xb3\xaf\x55\x4e\x8b\x0b\x00\x00")

func hooksPreCommitBytes() ([]byte, error) {
	return bindataRead(
		_hooksPreCommit,
		"hooks/pre-commit",
	)
}

func hooksPreCommit() (*asset, error) {
	bytes, err := hooksPreCommitBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hooks/pre-commit", size: 2955, mode: os.FileMode(509), modTime: time.Unix(1498637649, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/.csscomb.json": configCsscombJson,
	"config/.editorconfig": configEditorconfig,
	"hooks/pre-commit": hooksPreCommit,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		".csscomb.json": &bintree{configCsscombJson, map[string]*bintree{}},
		".editorconfig": &bintree{configEditorconfig, map[string]*bintree{}},
	}},
	"hooks": &bintree{nil, map[string]*bintree{
		"pre-commit": &bintree{hooksPreCommit, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

