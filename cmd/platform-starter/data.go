// Code generated by go-bindata.
// sources:
// config/.csscomb.json
// config/.editorconfig
// hooks/pre-commit
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configCsscombJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x41\xae\xdb\x30\x0c\x44\xf7\x39\x85\xa0\x75\x75\x81\x9c\xa5\x1b\x4a\x1e\x27\x42\x68\xd2\xa5\xe8\x1a\x49\xd1\xbb\x17\x4e\xea\x16\xf6\x77\xb2\xe5\x3c\xce\x88\xa4\x7e\x9d\x42\x08\x21\x1a\x06\xfd\x89\x84\x61\xf4\x7b\xb2\x89\xd1\xe0\x2d\x9e\x83\xdb\x84\x6f\x2f\x84\x78\xa6\x7b\x4b\x0d\x43\x2d\xca\x2a\x5b\x75\x29\x59\x2a\xd4\x10\xcf\x21\xb2\xce\xb0\xf8\x57\xca\xac\xe5\x96\xaa\x74\x10\x5f\xc4\x67\x71\xd3\xd6\xae\x6a\x7e\x25\xe9\xe2\x39\xf4\xc4\x6d\x35\x05\x63\x80\xf8\xb1\x2d\xb4\x4f\x82\x99\xab\x60\xfb\x14\x06\x75\x55\x2e\xe9\x01\xd3\x9d\xe1\x8f\x49\x1d\xcb\x5c\xb1\x55\xb9\x30\x56\xaf\xa6\xe6\x49\xad\x83\xa5\x9e\x98\x33\x95\xdb\x02\x51\x2e\xff\x88\x91\x0a\x52\x46\xaf\x86\xb4\xce\x1f\xb7\x2a\xf5\x0e\xfb\x2f\x86\x37\xbd\x43\xae\x42\xae\x76\xc0\xac\x0e\x1f\x90\x0c\x9f\x01\x49\x1d\x0a\x93\x91\x57\x95\xe7\x40\xdf\xe5\x30\x4e\x47\xc8\xb2\x8c\x6c\x54\xf0\x36\xf1\x0b\xb5\x77\x7b\x61\x0d\x8c\xe2\x6a\xa9\x03\xd7\xa1\x3a\xec\x43\xf2\x31\x7c\xbc\x13\xd6\xf6\x2e\xde\xad\x8e\xe9\x49\xef\xfe\xa3\x53\x4e\xad\x3e\x76\xc7\x9f\xa4\x3a\xa3\xb5\xf5\xfa\x8b\x74\xfa\x7d\xfa\x13\x00\x00\xff\xff\x77\x38\x8d\xf7\xe7\x02\x00\x00")

func configCsscombJsonBytes() ([]byte, error) {
	return bindataRead(
		_configCsscombJson,
		"config/.csscomb.json",
	)
}

func configCsscombJson() (*asset, error) {
	bytes, err := configCsscombJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.csscomb.json", size: 743, mode: os.FileMode(436), modTime: time.Unix(1498571809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configEditorconfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xb1\x4e\xec\x30\x10\x45\x7b\x7f\xc5\x48\xe9\x9e\xf2\x52\x20\x0a\x9a\x54\xb0\x05\xdf\x80\x22\xcb\x1b\x8f\x93\x59\x39\xe3\xc8\x33\x4b\x58\xd0\xfe\x3b\xb2\x37\x50\x20\x41\x67\x5d\x5f\x9f\x7b\xe4\x06\x0e\x9e\x34\xe5\xc7\xc4\x81\x26\x98\x31\xae\x02\x1e\x5f\x31\xa6\x15\x73\x39\x06\x62\x04\xc7\x1e\x16\x47\xac\x8e\x18\xc6\xc4\x42\xa2\xc8\x6a\x1a\x18\x93\x27\x9e\x40\xf4\x12\x51\xe0\x88\xba\x21\x32\x78\x0a\x01\x33\xb2\x02\x56\xbc\x54\xc2\xf3\xd3\x41\x4c\xb3\x47\x63\x5d\xec\x52\x9e\x8c\xc9\x29\x29\xf4\xa0\xf9\x8c\xc6\xbc\xfc\x1b\x0c\xb2\xb7\x29\xd8\x58\xb6\x7b\x88\xc1\x8c\xb3\xcb\x82\xa5\x74\xd6\xf0\xff\xc1\x68\xa6\xc5\x6a\x76\x14\x89\x27\xbb\xcd\xa4\x28\xab\x1b\xf1\x8b\x42\x2c\x98\xd5\x06\x62\x17\x2d\xe3\xb6\x93\xf6\x3b\x8f\xac\xb6\x2a\x43\x0f\xf5\xdd\x77\x48\xef\x25\xbb\x2f\x1a\xdd\x7c\x94\xe1\x37\x52\x70\x51\xaa\x6c\xf7\x71\x92\x56\xa5\x3d\xc9\x5b\x7b\x59\xe2\x75\xf8\x81\xba\xbb\x95\xca\x8f\xb4\x8b\xbf\x0e\x7f\xa9\xdf\xa0\x9f\x01\x00\x00\xff\xff\xb7\x42\x12\xfc\x94\x01\x00\x00")

func configEditorconfigBytes() ([]byte, error) {
	return bindataRead(
		_configEditorconfig,
		"config/.editorconfig",
	)
}

func configEditorconfig() (*asset, error) {
	bytes, err := configEditorconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.editorconfig", size: 404, mode: os.FileMode(436), modTime: time.Unix(1498571849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hooksPreCommit = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x6d\x4f\xdb\x4a\x16\xfe\xcc\xfc\x8a\xe7\x26\x51\x81\x0a\x27\x14\x71\x11\x85\x4b\x57\x6c\x4a\x77\x91\x68\x59\x15\xa4\x7e\x68\x51\x35\xf6\x1c\xc7\x53\xec\x19\x77\x66\x9c\x90\xaa\xda\xdf\xbe\x3a\x63\x3b\x40\x09\xda\xea\xfa\x53\xec\x99\x39\xf3\xbc\x9c\x97\x0c\xff\x98\xa4\xda\x4c\x7c\x21\x86\x62\x88\x53\x03\xba\x93\x55\x5d\x12\x0a\x6b\x6f\xe1\x33\xa7\xeb\x80\x60\x31\x27\xa7\xf3\x25\x16\x85\x0c\xd0\x1e\x32\xb5\x4d\xfc\x9e\x12\x32\x5b\x55\x3a\x04\x52\x63\x31\xc4\x54\x96\x25\x29\xa4\x4b\x0c\x66\x3a\x74\x6b\x03\x2c\x74\x28\x60\x2c\xa4\x9b\x35\x15\x99\xe0\xc7\xc0\x75\xd1\xdf\x52\xd8\xa6\x54\x62\x08\xba\xd3\xa1\xdf\x6a\x92\x1f\xe4\x2c\x7c\x90\xa1\xf1\x90\x79\x20\x07\xed\x7d\xa3\xcd\x0c\xd2\x40\xd6\xb5\xb3\xb5\xd3\x32\x10\x2a\xf2\x5e\xce\x08\x3a\x17\x43\x70\x04\x69\x82\x67\x70\x3e\xd8\x1a\xa1\xe8\x21\x8e\x23\xc7\x6b\x0b\x32\x32\x2d\x09\xa1\xd0\x3e\x22\xd8\x81\x23\x23\xab\xee\x4b\xae\x79\xcd\x62\x50\x3b\x4a\x3a\x02\x63\x21\x74\x0e\x66\xe4\x68\x9e\xd4\xd2\x79\x42\x92\x74\xa2\xfc\xfb\xec\xf4\x2d\xde\x4c\x14\xcd\x27\xa6\x29\x4b\xec\xbd\x79\xf1\x4a\x84\x82\x8c\xd8\x90\x33\xa9\x8d\x0f\x27\xbc\x45\x50\xe9\x49\x6c\x0c\x71\x6e\x74\xd0\xb2\xec\x50\x1d\x41\xe9\x3c\x47\xb7\x93\xb9\x51\x55\x87\x25\x82\x23\x82\x4d\xbf\x51\x16\xee\xe3\xec\xa7\x87\x7b\x7f\xaa\xec\x60\x7f\x2f\x4b\x0f\x28\x7d\x2d\x77\x0f\x76\xe9\xcf\xfd\x34\x3f\x54\x07\xaf\xf7\x0e\x0f\xf3\x94\x68\xff\xf5\xee\xbe\xc8\xb5\x10\x43\x9c\xe7\x58\xda\x26\x0a\xc2\x8c\x64\x59\xda\x45\xd4\xf6\xf4\x6a\x7a\x7e\x1e\x99\x32\x6f\x0f\x4f\xa1\x25\x3f\x97\x4e\xb7\xe2\x58\x04\xd7\xd0\x58\xc4\x43\xc6\x1a\xe9\x33\xad\x4f\x46\x5b\xad\xad\x26\xd7\x33\x24\x49\x6a\x6d\x19\x25\xf4\xe3\x47\xfb\xb6\xf9\xf6\xa9\xb3\xde\xa3\x2e\x65\xc8\xad\xab\x50\x3b\xcb\x64\x3c\x02\x19\x15\xe1\xcc\xad\x56\xeb\xe0\x1c\xa3\x76\x34\x27\x13\xc4\x90\xed\xab\x90\x3b\x5b\x21\xa5\xe8\xbd\x52\x14\x4f\xb3\xaf\x8e\x6a\xeb\x75\xb0\x6e\x39\xc6\x27\x02\xdd\xd5\xa5\xd5\x21\x2e\xe5\x32\xe3\x1f\x32\xbe\x89\x21\x6a\xa7\x4d\x88\xcc\x9c\x34\x33\xe2\xc4\x72\xc1\xa3\x5d\x87\xaf\x65\x46\xc8\x0a\xe9\x64\xc6\x99\x26\x8d\x02\x19\xe5\xdb\x6c\x0c\xba\x54\x34\xe6\x0c\xf8\x8c\xc1\xe8\x11\xd1\x01\xfe\x38\xc1\x80\x95\x1a\xe0\x06\x2f\x5e\xb0\xbf\x1f\x6c\xa0\xd5\xd5\x68\x3c\xc1\xe6\x48\x9d\xcc\x6e\x89\x6f\x74\xb6\x31\x0a\x12\xc1\x75\x50\xb4\x87\xbd\x45\x41\x8e\x76\xb0\xa5\xc3\xa6\xe7\x20\xcc\x1f\x8e\xbe\x37\xda\x91\xda\x41\x6e\x1d\x6a\xeb\x82\x4c\x75\xa9\x39\x3b\x2c\xae\x6c\x29\x9d\xf6\x78\xb5\xbb\xe9\x31\x69\xbc\x8b\x95\x1c\xdc\xf6\x0e\xbc\x36\x59\x4c\xb5\xc8\xed\x7b\x23\x1d\xf5\x00\x90\x2e\x03\x79\x14\xb2\xae\xc9\x70\x98\x5c\x96\x25\xb4\x89\x5b\x15\x79\x3d\x33\x32\x90\x6a\xa1\x8d\xc5\x46\x20\x1f\xd0\xba\x1e\xf3\x34\x49\x32\x99\x15\xa4\x90\x24\xec\x55\x62\x4d\xb9\x44\x92\xf0\x5a\x92\xeb\x32\x90\x3b\x39\x45\xf2\x03\xa3\x3e\xa1\x7f\x8a\x0d\xe0\x62\xfa\xf5\xf4\xe2\xe2\x64\xca\xa4\x13\x85\xcd\xcf\x48\xfe\x7b\xf3\x65\x77\x13\x3f\xb1\xc8\x90\x64\xdb\x2c\xe3\x6e\x57\x34\x99\x0c\xf8\xeb\xaf\x2f\x67\x97\xef\xc4\x99\x73\xd6\x1d\xe1\x34\x04\x2e\x8a\x98\x34\x8a\xb5\x7b\x9c\x34\x60\x24\x63\x21\xae\x39\x83\x33\x69\x90\x49\x56\xbd\x76\x36\x2d\xa9\xf2\xd0\x8f\xcb\x60\x61\xdd\x6d\x6b\x6c\x4d\x96\x7b\x9d\x35\xb0\xa1\x20\xb7\xca\x55\xcf\xc1\x62\x73\x6b\x35\x2f\x89\xfb\x0a\xf7\x3d\x35\xd7\xbe\xaf\x8f\x55\xd3\xa0\x88\x62\x2c\x44\x57\x6f\xb7\xc6\x2e\xda\x56\xc9\x6f\x2c\xbe\xb2\x9c\xbb\xfc\xc6\xf0\x54\x1f\x23\xe2\x2d\x28\xbb\x45\xe3\xb5\x99\x1d\x09\x01\x3c\xa8\xaf\x35\x85\x15\x8b\x52\xb0\x34\x1b\xb1\x5b\xbe\x8a\x95\x3e\xbd\xba\x9a\x5e\xbe\xff\xe7\xc9\x68\x6b\x51\xe8\xac\x40\xe6\x7d\x66\xab\x14\x7b\x6f\xb0\x6a\x4b\xdb\x31\x7f\x3f\xb3\x37\x83\x51\x77\x60\x80\x9b\x9b\x63\x44\xd5\xd1\x3d\x4f\xc5\xef\x83\x69\x0f\x63\x03\xd8\xd4\xd8\xe4\xc7\x42\x7c\x62\x11\x97\xd2\x99\x88\xbc\x7d\xf8\x15\xb3\xd2\xa6\xb2\x8c\x66\x75\xc7\xbb\xcd\x1f\xfe\xf3\xfe\x68\xb5\xd5\xd4\x55\x1f\x0e\xc9\xec\x7e\xe7\x69\x6a\x5d\x60\xc1\xfa\xbe\xcd\x68\xfa\x43\x0f\x68\xf7\xc8\x46\x5b\xa5\xc7\x4f\xcc\x1c\xd5\x48\xe6\x30\x56\xd1\xd7\xca\xaa\xa6\xa4\x87\x9f\xe7\x64\x94\x75\xbd\x0c\xa3\x7f\x20\x31\x84\xdd\xa7\x0a\x50\x56\x58\x0c\x22\x79\x2e\xbb\x4a\x86\x88\x25\x3a\xd4\x63\xdc\xe1\x09\xf8\x08\xe3\x60\x1d\xc0\xb3\xb7\xe7\xd7\x97\x1f\xa7\x97\x1f\xde\x9d\xff\xeb\xeb\xf5\xe5\xe5\xc5\xd5\xca\x22\x52\xdc\xb7\x5a\xa3\x93\x60\x6d\xe9\x9f\x77\xeb\x69\x98\xdf\x32\x6e\xcd\x15\x7f\xd3\xc3\xa7\x91\x7e\xc3\xce\x75\x87\x7e\xd7\x59\x6e\x77\xb1\xb2\xb5\xf9\xd5\xdd\xd6\xc6\x67\xec\xde\x3e\x86\xb2\xab\x80\x9d\x84\x0a\x83\x11\x07\x5b\x23\x5a\xbc\xf6\xa9\x4c\x6d\x4d\x8e\xb6\x52\xe9\xdb\x1a\x4f\x92\x2e\xc6\xe4\xe5\xcb\xc9\xcb\xc1\xf6\x3d\x66\x9e\xe9\xf8\xe5\x79\x36\x62\x87\x63\x75\x80\xa9\x3e\x06\xfb\x7c\x5a\xae\xf1\xf9\x9a\x67\x46\xec\x2f\x95\xf6\x5d\xaa\x92\x8a\xc2\xf9\x1d\xd4\x25\x49\xcf\xad\xe9\x2e\x0e\xd1\x31\x3e\x52\x45\x55\x4a\xee\xbe\x0f\x59\x11\x5b\x50\xba\xc4\xb7\xc6\x87\x2e\xc5\x63\x3f\xb3\xdc\x74\x7a\xa3\xa4\x51\x0f\x92\x63\x0d\x3b\xbe\xa3\x96\xa1\x98\x04\x3b\xa9\x96\x93\x08\x20\x2a\xf5\x7f\x1c\x7f\xec\xfc\xf1\x43\x5d\x94\x35\x24\xba\xff\x30\x61\xc5\x73\x51\xe8\x40\xed\xb0\x26\x4e\x72\xa6\xc9\x83\x3d\x82\xb6\x79\x4e\x46\xf1\x5d\xab\xa1\xe0\xe3\x24\xcf\xa5\x2e\xc7\x82\xee\x28\x43\x3f\xc7\x12\x6d\x14\xdd\xf1\x34\x8b\xc6\xac\xa6\xda\x6a\x6c\x25\x89\xf8\x5f\x00\x00\x00\xff\xff\x96\x79\x17\x82\x1c\x0b\x00\x00")

func hooksPreCommitBytes() ([]byte, error) {
	return bindataRead(
		_hooksPreCommit,
		"hooks/pre-commit",
	)
}

func hooksPreCommit() (*asset, error) {
	bytes, err := hooksPreCommitBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hooks/pre-commit", size: 2844, mode: os.FileMode(509), modTime: time.Unix(1498576861, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/.csscomb.json": configCsscombJson,
	"config/.editorconfig": configEditorconfig,
	"hooks/pre-commit": hooksPreCommit,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		".csscomb.json": &bintree{configCsscombJson, map[string]*bintree{}},
		".editorconfig": &bintree{configEditorconfig, map[string]*bintree{}},
	}},
	"hooks": &bintree{nil, map[string]*bintree{
		"pre-commit": &bintree{hooksPreCommit, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

